{
    "TR": {
        "c":"",
        "meta":"tr"
    },
    "tr":{
        "s":"",
        "j":"dmFyIF9GTV89ZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gdCh0LGUpe2UuZm9yRWFjaChmdW5jdGlvbihlKXtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlLnByb3RvdHlwZSkuZm9yRWFjaChmdW5jdGlvbihuKXt0LnByb3RvdHlwZVtuXT1lLnByb3RvdHlwZVtuXX0pfSl9dmFyIGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dGhpcy5faXNDaWNsZUZpbmlzaD0hMCx0aGlzLmRlbGF5VG9DbG9zZT01ZTMsc2V0VGltZW91dChmdW5jdGlvbigpe3QuU0JQLmNsYXNzTGlzdC5hZGQoIlNCUF9fciIpLHQuU0IuY2xhc3NMaXN0LmFkZCgiU0JfX3IiKX0sNTAwKX1yZXR1cm4gdC5wcm90b3R5cGUuX3Jlc2V0VGltZT1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh0aGlzLlRpbWVySWQpLHRoaXMuVGltZXJJZD1udWxsfSx0LnByb3RvdHlwZS5fcmVzZXRQYW5lPWZ1bmN0aW9uKHQpe3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJyZXNpemUiLHRoaXMuT25SZXMpLHQuc3R5bGUubGVmdD0iIn0sdC5wcm90b3R5cGUuX29uQ2xpY2tCdG49ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXM7cmV0dXJuIHRoaXMuT25DbGlja0J0bj1mdW5jdGlvbigpe3QucmVtb3ZlRXZlbnRMaXN0ZW5lcigiY2xpY2siLGkuT25DbGlja0J0biksaS5fcmVzZXRUaW1lKCksRnVuY3Rpb24uaXNGbihlKSYmZShuKX0sdGhpcy5PbkNsaWNrQnRufSx0LnByb3RvdHlwZS5fbm9ybUNicz1mdW5jdGlvbih0KXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0KT90Olt0XX0sdC5wcm90b3R5cGUuX29uVHJhbnNpdEVuZD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIHRoaXMuT25UcmFuc2l0RW5kPWZ1bmN0aW9uKCl7dC5yZW1vdmVFdmVudExpc3RlbmVyKCJ0cmFuc2l0aW9uZW5kIixuLk9uVHJhbnNpdEVuZCk7Zm9yKHZhciBpPTAsbz1uLl9ub3JtQ2JzKGUpO2k8by5sZW5ndGg7aSsrKXt2YXIgcj1vW2ldO0Z1bmN0aW9uLmlzRm4ocikmJnIodCl9fSx0aGlzLk9uVHJhbnNpdEVuZH0sdC5wcm90b3R5cGUuX29uUmVzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuT25SZXM9ZnVuY3Rpb24oKXtlLl9hbGlnblBhbmUodCl9LHRoaXMuT25SZXN9LHQucHJvdG90eXBlLl9hbGlnblBhbmU9ZnVuY3Rpb24oZSl7dm9pZCAwPT09ZSYmKGU9dC5TQlApO3ZhciBuPWRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGgsaT1lLm9mZnNldFdpZHRoO24+aT9lLnN0eWxlLmxlZnQ9KG4taSkvMisicHgiOmUuc3R5bGUubGVmdD0iMHB4In0sdC5wcm90b3R5cGUuX2RlbGF5ZWRDbG9zZT1mdW5jdGlvbih0LGUsbixpKXt2YXIgbz10aGlzO3QmJih0aGlzLlRpbWVySWQ9c2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiBvLmNsb3NlUGFuZShlLG4saSl9LHRoaXMuZGVsYXlUb0Nsb3NlKSl9LHQucHJvdG90eXBlLmRlc3Ryb3lQYW5lPWZ1bmN0aW9uKCl7dmFyIGU9dC5TQlBfYnRuO3QuU0JQX21lcy5pbm5lckhUTUw9ZS5pbm5lckhUTUw9IiJ9LHQucHJvdG90eXBlLnNob3dCYXI9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSYmKGU9ITApLGUpe2Zvcih2YXIgbj10LlNCLGk9MCxvPW4uY2hpbGRyZW47aTxvLmxlbmd0aDtpKyspe29baV0uY2xhc3NMaXN0LnJlbW92ZSgiU0Jfc3RvcCIpfW4uY2xhc3NMaXN0LmFkZCgiU0JfX3Nob3ciKX19LHQucHJvdG90eXBlLnNldE5vdGlmaWNhdG9yPWZ1bmN0aW9uKGUsbixpKXt2YXIgbz1lLm1lcyxyPWUuYnRuLHM9ZS5kaXNhYmxlZCxhPXZvaWQgMCE9PXMmJnMsYz1lLmF1dG9DbG9zZSx1PXZvaWQgMCE9PWMmJmMsbD10LlNCUCxkPXQuU0JQX2J0bjt0LlNCUF9tZXMuaW5uZXJIVE1MPW8sZC5yZW1vdmVFdmVudExpc3RlbmVyKCJjbGljayIsdGhpcy5PbkNsaWNrQnRuKSxkLmlubmVySFRNTD1yLGQuZGlzYWJsZWQ9YSx0aGlzLl9pc0NpY2xlRmluaXNofHx0aGlzLl9hbGlnblBhbmUobCksYXx8ZC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsdGhpcy5fb25DbGlja0J0bihkLG4sbCkpLHRoaXMuX2RlbGF5ZWRDbG9zZSh1LG51bGwsaSxsKX0sdC5wcm90b3R5cGUuaGlkZUJhcj1mdW5jdGlvbihlLG4pe3ZhciBpPXRoaXM7dm9pZCAwPT09ZSYmKGU9ITApLHZvaWQgMD09PW4mJihuPW51bGwpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpZihlKXt2YXIgbz10LlNCO28uYWRkRXZlbnRMaXN0ZW5lcigidHJhbnNpdGlvbmVuZCIsaS5fb25UcmFuc2l0RW5kKG8sW2Z1bmN0aW9uKHQpe3JldHVybiBBcnJheS5mcm9tKHQuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHQuY2xhc3NMaXN0LmFkZCgiU0Jfc3RvcCIpfSl9LG5dKSksby5jbGFzc0xpc3QucmVtb3ZlKCJTQl9fc2hvdyIpfWVsc2UgRnVuY3Rpb24uaXNGbihuKSYmbigpfSwxZTMpfSx0LnByb3RvdHlwZS5jbG9zZVBhbmU9ZnVuY3Rpb24oZSxuLGkpe3ZhciBvPXRoaXM7dm9pZCAwPT09aSYmKGk9dC5TQlApLHRoaXMuX3Jlc2V0VGltZSgpO3ZhciByPXQuU0JQX2J0bjtyLmRpc2FibGVkPSEwLHRoaXMuX25vcm1DYnMoZSkuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gRnVuY3Rpb24uaXNGbih0KT90KGkpOnR9KSxpLmFkZEV2ZW50TGlzdGVuZXIoInRyYW5zaXRpb25lbmQiLHRoaXMuX29uVHJhbnNpdEVuZChpLFtmdW5jdGlvbigpe3JldHVybiByLnJlbW92ZUV2ZW50TGlzdGVuZXIoImNsaWNrIixvLk9uQ2xpY2tCdG4pfSxmdW5jdGlvbih0KXtyZXR1cm4gby5fcmVzZXRQYW5lKHQpfSxmdW5jdGlvbigpe28uX2lzQ2ljbGVGaW5pc2g9ITB9XS5jb25jYXQodGhpcy5fbm9ybUNicyhuKSkpKSxpLmNsYXNzTGlzdC5yZW1vdmUoIlNCUF9fb3BlbiIpfSx0LnByb3RvdHlwZS5vcGVuUGFuZT1mdW5jdGlvbihlLG4saSxvLHIpe3ZhciBzPXRoaXM7dm9pZCAwPT09ciYmKHI9ITEpO3ZhciBhPXQuU0JQO3RoaXMuX25vcm1DYnMoZSkuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gRnVuY3Rpb24uaXNGbih0KT90KGEpOnR9KSx0aGlzLl9hbGlnblBhbmUoYSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInJlc2l6ZSIsdGhpcy5fb25SZXMoYSkpLGEuYWRkRXZlbnRMaXN0ZW5lcigidHJhbnNpdGlvbmVuZCIsdGhpcy5fb25UcmFuc2l0RW5kKGEsdGhpcy5fbm9ybUNicyhuKS5jb25jYXQoW2Z1bmN0aW9uKHQpe3JldHVybiBzLl9kZWxheWVkQ2xvc2UocixpLG8sdCl9XSkpKSxhLmNsYXNzTGlzdC5hZGQoIlNCUF9fb3BlbiIpfSx0LnByb3RvdHlwZS5jb25maWc9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ITApLHRoaXMuX2lzQ2ljbGVGaW5pc2g/KHRoaXMuX2lzQ2ljbGVGaW5pc2g9ITEsdGhpcy5zaG93QmFyKHQpLGZ1bmN0aW9uKG4saSxvKXt2YXIgcj1GdW5jdGlvbi5pc0ZuKG4pP24oKTpuO2UuaGlkZUJhcih0LGZ1bmN0aW9uKCl7cmV0dXJuIGUub3BlblBhbmUoZS5zZXROb3RpZmljYXRvci5iaW5kKGUscixpLG8pKX0pfSk6ZnVuY3Rpb24oKXt9fSx0fSgpO2UuU0JQPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5TQlAiKSxlLlNCPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5TQiIpLGUuU0JQX2J0bj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuU0JQX19idG4iKSxlLlNCUF9tZXM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLlNCUF9fbWVzc2FnZSIpO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLkh0dHA9dCx0aGlzLlRpbWVvdXQ9NWUzfXJldHVybiB0LnByb3RvdHlwZS5fb25PbkxpbmU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO3JldHVybiB0aGlzLk9uTGluZT1mdW5jdGlvbigpe24ud2F0Y2godCxlKSx3aW5kb3cub25vbmxpbmU9ZnVuY3Rpb24oKXtyZXR1cm4iIn19LHRoaXMuT25MaW5lfSx0LnByb3RvdHlwZS5fc2VuZD1mdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpczt0aGlzLkh0dHAuc2VuZFJlcShlKS50aGVuKGZ1bmN0aW9uKCl7aS5jb2w9aS5jb2wuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0IT09bn0pLGxvY2FsU3RvcmFnZS5zZXRJdGVtKHQsaS5jb2wuam9pbigiLCAiKSksaS5fY2xlYXJBbGwodCl9KX0sdC5wcm90b3R5cGUuX2NsZWFyQWxsPWZ1bmN0aW9uKHQpe2xvY2FsU3RvcmFnZS5nZXRJdGVtKHQpfHwibnVtYmVyIiE9dHlwZW9mIHRoaXMuVGltZXJ8fChsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0KSxjbGVhckludGVydmFsKHRoaXMuVGltZXIpLHdpbmRvdy5vbm9ubGluZT1mdW5jdGlvbigpe3JldHVybiIifSx0aGlzLmNvbD10aGlzLk9uTGluZT10aGlzLlRpbWVyPW51bGwpfSx0LnByb3RvdHlwZS53YXRjaD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7dGhpcy5UaW1lcj1zZXRJbnRlcnZhbChmdW5jdGlvbigpe2lmKG5hdmlnYXRvci5vbkxpbmUpe3ZhciBpPWxvY2FsU3RvcmFnZS5nZXRJdGVtKHQpO2k/KG4uY29sPWkuc3BsaXQoIiwgIiksbi5jb2wuZm9yRWFjaChmdW5jdGlvbihpKXt2YXIgbz1lLm9wdGlvbnMuYm9keSxyPSJzdHJpbmciPT10eXBlb2Ygbz9KU09OLnBhcnNlKG8pOm87ci5yZXFJZD1pLGUub3B0aW9ucy5ib2R5PXIsbi5fc2VuZCh0LGUsaSl9KSk6bi5fY2xlYXJBbGwodCl9ZWxzZSBjbGVhckludGVydmFsKG4uVGltZXIpLG4uVGltZXI9bnVsbCx3aW5kb3cub25vbmxpbmU9bi5fb25PbkxpbmUodCxlKX0sdGhpcy5UaW1lb3V0KX0sdH0oKSxpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gdC5wcm90b3R5cGUuY2hlY2tWYWxpZGl0eT1mdW5jdGlvbih0KXtyZXR1cm4hdC5jaGVja1ZhbGlkaXR5fHx0LmNoZWNrVmFsaWRpdHkoKX0sdC5wcm90b3R5cGUud2hpdGVTcGFjZVdhdGNoZXI9ZnVuY3Rpb24odCxlKXt2YXIgbj10LnNwbGl0KCIgIikuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiEhdH0pO24ubGVuZ3RoPjE/ZS52YWx1ZT1uLmpvaW4oIiAiKTplLnZhbHVlPW4uam9pbigiIil9LHQucHJvdG90eXBlLnZhbGlkYXRlRmllbGQ9ZnVuY3Rpb24odCl7dmFyIGU9dC52YWx1ZS50cmltKCksbj10LnBhcmVudE5vZGU7ZT8obi5jbGFzc0xpc3QuYWRkKCJGX19kaXJ0eSIpLHRoaXMuY2hlY2tWYWxpZGl0eSh0KT8odGhpcy53aGl0ZVNwYWNlV2F0Y2hlcihlLHQpLHRoaXMuc2V0TWVzc2FnZSh0KSxuLmNsYXNzTGlzdC5hZGQoIkZfX3ZhbGlkIikpOih0aGlzLnNldE1lc3NhZ2UodCksbi5jbGFzc0xpc3QuYWRkKCJGX19pbnZhbGlkIikpKToodC5yZXF1aXJlZCYmKHRoaXMuc2V0TWVzc2FnZSh0KSxuLmNsYXNzTGlzdC5hZGQoIkZfX2ludmFsaWQiKSksbi5jbGFzc0xpc3QucmVtb3ZlKCJGX19kaXJ0eSIpLHQudmFsdWU9IiIpLG4uY2xhc3NMaXN0LnJlbW92ZSgiRl9fYWN0aXZlIil9LHQucHJvdG90eXBlLnNldE1lc3NhZ2U9ZnVuY3Rpb24odCl7dC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoIi5GX19pbmZvcm0iKS5pbm5lckhUTUw9dC52YWxpZGF0aW9uTWVzc2FnZXx8IiJ9LHR9KCksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQucHJvdG90eXBlLmlzTFNTdXBwb3J0PWZ1bmN0aW9uKCl7dGhpcy5MUz0ibG9jYWxTdG9yYWdlImluIHdpbmRvd3x8ITF9LHQucHJvdG90eXBlLnVzZXJEYXRhQnVmZkxTPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dm9pZCAwPT09dCYmKHQ9ImRhdGEtY2FjaGUiKTt2YXIgbj17fTtyZXR1cm4gZnVuY3Rpb24oaSl7cmV0dXJuIGkmJmkuaGFzQXR0cmlidXRlKHQpJiYobltpLmlkXT1pLnZhbHVlKSxmdW5jdGlvbigpe2UuTFMmJmxvY2FsU3RvcmFnZS5zZXRJdGVtKGUuVV9GbGFnLEpTT04uc3RyaW5naWZ5KG4pKX19fSx0LnByb3RvdHlwZS51c2VyRGF0YVVuQnVmZkxTPWZ1bmN0aW9uKCl7dmFyIHQ9bG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5VX0ZsYWcpLGU9dCYmSlNPTi5wYXJzZSh0KTtyZXR1cm4hKCF0aGlzLkxTfHwhZSkmJmZ1bmN0aW9uKHQpe3ZhciBuPSIiK3QuaWQ7biBpbiBlJiZ0LnNldEF0dHJpYnV0ZSgidmFsdWUiLGVbbl0pfX0sdC5wcm90b3R5cGUudXNlckRhdGFLaWxsQnVmZkxTPWZ1bmN0aW9uKCl7dGhpcy5MUyYmbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5VX0ZsYWcpfSx0LnByb3RvdHlwZS5oeWRyYXRvckxTPWZ1bmN0aW9uKHQpe2lmKHRoaXMuTFMpe3ZhciBlPXRoaXMuSF9GbGFnLG49bG9jYWxTdG9yYWdlLmdldEl0ZW0oZSk7aWYobil7dmFyIGk9bi5zcGxpdCgiLCAiKTtpLnB1c2godCksbG9jYWxTdG9yYWdlLnNldEl0ZW0oZSxpLmpvaW4oIiwgIikpfWVsc2UgbG9jYWxTdG9yYWdlLnNldEl0ZW0oZSx0KTtyZXR1cm4hMH1yZXR1cm4hMX0sdH0oKSxyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuSF9GbGFnPSJxdWUiLHRoaXMuVV9GbGFnPSJ1c2VyIix0aGlzLkJhc2U9d2luZG93Ll9XRldfLHRoaXMuc25hY2tCYXI9bmV3IGUsdGhpcy5pc0xTU3VwcG9ydCgpLHRoaXMuc2NoZWR1bGxlcj1uZXcgbih0aGlzLkJhc2UuaHR0cFNlcnZpY2UpLHRoaXMuX3NldE9uQWxsSW5wdXRzKCksdGhpcy5PblJlcz10aGlzLl9vbkxheW91dENoYW5nZShBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltkYXRhLWxheW91dF0iKSksZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLkZfX2xheW91dC1ibG9jayIpKSx0aGlzLk9uUmVzKCksdGhpcy5CYXNlLl9VX0V2ZW50TGlzdFNldHRlcigicmVzaXplIix0aGlzLk9uUmVzKX1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCJMQU5HIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5TSVRFX0xBTkd8fCJFTiJ9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCJEZWZhdWx0X2J0biIse2dldDpmdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiRGVmYXVsdF9idG4iKS5pbm5lckhUTUx9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuX2h0dHBPcHRzPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49IlBPU1QiKSx7dXJsOnQsb3B0aW9uczp7bWV0aG9kOm4sY2FjaGU6Im5vLWNhY2hlIixoZWFkZXJzOnsiQ29udGVudC10eXBlIjoiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCIsQWNjZXB0OiJhcHBsaWNhdGlvbi9qc29uIn0sYm9keTplfX19LHQucHJvdG90eXBlLl9mb3JtU2VyaWFsaXplcj1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5xdWVyeVNlbGVjdG9yQWxsKCIuRl9fZm9ybS13cmFwIGlucHV0Om5vdChbdHlwZT1zdWJtaXRdKSwgLkZfX2Zvcm0td3JhcCB0ZXh0YXJlYSIpLG49e30saT10aGlzLnVzZXJEYXRhQnVmZkxTKCksbz0wLHI9ZTtvPHIubGVuZ3RoO28rKyl7dmFyIHM9cltvXTtpZihpKHMpLCJyYWRpbyI9PT1zLnR5cGV8fCJjaGVja2JveCI9PT1zLnR5cGUpcy5jaGVja2VkJiYobltzLmlkXT0hMCk7ZWxzZXtpZighcy52YWx1ZS50cmltKCkpY29udGludWU7bltzLmlkXT1zLnZhbHVlLnRyaW0oKX19cmV0dXJuW09iamVjdC5hc3NpZ24oe0FDVElPTjoiUkVHSVNURVIiLFNJVEVfTEFORzp0aGlzLkxBTkd9LG4pLGkoKV19LHQucHJvdG90eXBlLl9kZWxheT1mdW5jdGlvbih0KXtzZXRUaW1lb3V0KHQsMWUzKX0sdC5wcm90b3R5cGUuX2Rpc2FibGVCdG49ZnVuY3Rpb24odCl7dC5kaXNhYmxlZD0hMH0sdC5wcm90b3R5cGUuX2VuYWJsZUJ0bj1mdW5jdGlvbih0KXt0LmRpc2FibGVkPSExfSx0LnByb3RvdHlwZS5fb25TdWJtaXQ9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMsbz10Lm9uQ2xTLHI9dC5vbkNsRixzPXQub25BZkNsb3NlO3JldHVybiBmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCk7dmFyIGE9dC50YXJnZXQsYz1hLnF1ZXJ5U2VsZWN0b3JBbGwoIi5GX19pbnZhbGlkIiksdT1hLmFjdGlvbjtpZih0LmlzVHJ1c3RlZCYmYy5sZW5ndGg8PTAmJmkuQmFzZS5TNy5pc0NhblNlbmRGb3JtKXtpLkJhc2UuUzcuaXNDYW5TZW5kRm9ybT0hMTt2YXIgbD1pLnNuYWNrQmFyLmNvbmZpZygpO2kuX2Rpc2FibGVCdG4odSk7dmFyIGQ9aS5fZm9ybVNlcmlhbGl6ZXIoYSk7aS5CYXNlLmh0dHBTZXJ2aWNlLnNlbmRSZXEoaS5faHR0cE9wdHMoaS5CYXNlLlM3LlVSSXMub3JkZXIsZFswXSkpLnRoZW4oZnVuY3Rpb24odCl7dD1KU09OLnBhcnNlKHQpLGkuQmFzZS5SZXFJRD10LnJlcUlkLEZ1bmN0aW9uLmlzRm4oZSkmJmUoKSxkWzFdKCksbCh7bWVzOnQuaW5mbyxidG46ZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI05fX3JlZ2lzdGVyIC5OX19zdWNjZXNzIC5idG4iKS5pbm5lckhUTUwsYXV0b0Nsb3NlOiEwLGRpc2FibGVkOiExfSxvLHMpfSkuY2F0Y2goZnVuY3Rpb24oKXtGdW5jdGlvbi5pc0ZuKG4pJiZuKCksbChpLl9mb3JXaWRnZXRFeHRyYWN0b3Ioe3NlbGVjdG9yTmFtZToiI05fX3JlZ2lzdGVyIC5OX19mYWlsIn0pLGZ1bmN0aW9uKCl7cmV0dXJuIHIoZnVuY3Rpb24oKXtpLkJhc2UuUzcuaXNDYW5TZW5kRm9ybT0hMCxpLl9lbmFibGVCdG4odSksaS5zbmFja0Jhci5kZXN0cm95UGFuZSgpfSl9LFtmdW5jdGlvbigpe3JldHVybiBpLl9lbmFibGVCdG4odSl9LHNdKX0pLnRoZW4oZnVuY3Rpb24oKXtsPW51bGx9KX19fSx0LnByb3RvdHlwZS5fZm9yV2lkZ2V0RXh0cmFjdG9yPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxpPXQuc2VsZWN0b3JOYW1lLG89dC5tZXNTZWwscj12b2lkIDA9PT1vPyIubWVzIjpvLHM9dC5idG5TZWwsYT12b2lkIDA9PT1zPyIuYnRuIjpzLGM9dm9pZCAwPT09ZT97fTplLHU9Yy5hdXRvQ2xvc2UsbD12b2lkIDA9PT11fHx1LGQ9Yy5kaXNhYmxlZCxmPXZvaWQgMCE9PWQmJmQ7aWYoIWkpdGhyb3cgRXJyb3IoIllvdSBJZGlvdCEiKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGkpO3JldHVybnttZXM6dC5xdWVyeVNlbGVjdG9yKHIpLmlubmVySFRNTCxidG46dC5xdWVyeVNlbGVjdG9yKGEpP3QucXVlcnlTZWxlY3RvcihhKS5pbm5lckhUTUw6bi5EZWZhdWx0X2J0bixhdXRvQ2xvc2U6bCxkaXNhYmxlZDpmfX19LHQucHJvdG90eXBlLl9zZXREZWZEYXRlPWZ1bmN0aW9uKHQpe3QudHlwZS5pbmNsdWRlcygiZGF0ZSIpJiYodC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoIkZfX2RpcnR5Iiksc2V0VGltZW91dChmdW5jdGlvbigpe3QudmFsdWU9KG5ldyBEYXRlKS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLDEwKX0pLHQubWluPShuZXcgRGF0ZSkudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwxMCkpfSx0LnByb3RvdHlwZS5fY2hlY2tEZWZhdWx0cz1mdW5jdGlvbih0KXt0LnZhbHVlJiZ0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgiRl9fZGlydHkiKX0sdC5wcm90b3R5cGUuX2NyZWF0ZU1lc1BoPWZ1bmN0aW9uKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpO2UuY2xhc3NOYW1lPSJGX19pbmZvcm0iLGUuaW5uZXJIVE1MPSIiLHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSx0Lm5leHRFbGVtZW50U2libGluZyl9LHQucHJvdG90eXBlLl9zZXRPbkFsbElucHV0cz1mdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIuRl9fZm9ybS13cmFwIGlucHV0Om5vdChbdHlwZT1zdWJtaXRdKSwgLkZfX2Zvcm0td3JhcCB0ZXh0YXJlYSIpO3RoaXMuT25Gb2N1cz1mdW5jdGlvbih0KXt2YXIgZT10LnRhcmdldCxuPWUucGFyZW50Tm9kZTtuLmNsYXNzTGlzdC5yZW1vdmUoIkZfX3ZhbGlkIiksbi5jbGFzc0xpc3QucmVtb3ZlKCJGX19pbnZhbGlkIiksbi5jbGFzc0xpc3QuYWRkKCJGX19hY3RpdmUiKX0sdGhpcy5PbkJsdXI9ZnVuY3Rpb24oZSl7dmFyIG49ZS50YXJnZXQ7dC52YWxpZGF0ZUZpZWxkKG4pfTtmb3IodmFyIG49dGhpcy51c2VyRGF0YVVuQnVmZkxTKCksaT0wLG89ZTtpPG8ubGVuZ3RoO2krKyl7dmFyIHI9b1tpXTtuJiZuKHIpLCJjaGVja2JveCIhPT1yLnR5cGUmJiJyYWRpbyIhPT1yLnR5cGUmJih0aGlzLl9jcmVhdGVNZXNQaChyKSx0aGlzLl9zZXREZWZEYXRlKHIpLHRoaXMuX2NoZWNrRGVmYXVsdHMociksdGhpcy5CYXNlLl9VX0V2ZW50TGlzdFNldHRlcigiZm9jdXMiLHRoaXMuT25Gb2N1cyxyKSx0aGlzLkJhc2UuX1VfRXZlbnRMaXN0U2V0dGVyKCJibHVyIix0aGlzLk9uQmx1cixyKSl9fSx0LnByb3RvdHlwZS5fb25MYXlvdXRDaGFuZ2U9ZnVuY3Rpb24odCxlKXt2YXIgbj05MjMsaT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJbZGF0YS1pbnMtcG9pbnRdIiksbz0hMTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgcj1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0V2lkdGg7bj5yJiYhbz8obz0hMCx0LmZvckVhY2goZnVuY3Rpb24odCl7dC5oYXNBdHRyaWJ1dGUoImRhdGEtbGF5b3V0LXVwIik/ZVswXS5pbnNlcnRCZWZvcmUodCxpWzBdKTplWzFdLmFwcGVuZENoaWxkKHQpfSkpOnI+PW4mJm8mJihvPSExLHQuZm9yRWFjaChmdW5jdGlvbih0KXt0Lmhhc0F0dHJpYnV0ZSgiZGF0YS1sYXlvdXQtdXAiKT9lWzFdLmluc2VydEJlZm9yZSh0LGlbMV0pOmVbMF0uYXBwZW5kQ2hpbGQodCl9KSl9fSx0LnByb3RvdHlwZS5jYW5jZWxsZXI9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcyxuPWUuTEFORyxpPWUuQmFzZSxvPWUuSF9GbGFnLHI9ZS5zY2hlZHVsbGVyLHM9ZS5zbmFja0JhcixhPWZ1bmN0aW9uKCl7aS5TNy5pc0NhblNlbmRGb3JtPSEwLGkuUmVxSUQ9bnVsbCxzLmRlc3Ryb3lQYW5lKCl9LGM9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49ZnVuY3Rpb24oKXtyZXR1cm4gcy5jbG9zZVBhbmUobnVsbCxhKX0pLHMuc2V0Tm90aWZpY2F0b3Ioe21lczplLGJ0bjp0LkRlZmF1bHRfYnRuLGF1dG9DbG9zZTohMCxkaXNhYmxlZDohMX0sbixhKX0sdT17QUNUSU9OOiJDQU5DRUwiLFNJVEVfTEFORzpuLHJlcUlkOmkuUmVxSUR9O3Muc2V0Tm90aWZpY2F0b3IodGhpcy5fZm9yV2lkZ2V0RXh0cmFjdG9yKHtzZWxlY3Rvck5hbWU6IiNOX19jYW5jZWwgLk5fX2lucHJvY2VzcyJ9LHthdXRvQ2xvc2U6ITEsZGlzYWJsZWQ6ITB9KSgpKTt2YXIgbD10aGlzLl9odHRwT3B0cyhpLlM3LlVSSXMub3JkZXIsdSwiREVMRVRFIik7aS5odHRwU2VydmljZS5zZW5kUmVxKGwpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIHQuX2RlbGF5KGZ1bmN0aW9uKCl7cmV0dXJuIGMoZSl9KX0pLmNhdGNoKGZ1bmN0aW9uKCl7cmV0dXJuIHQuX2RlbGF5KGZ1bmN0aW9uKCl7dC5oeWRyYXRvckxTKGkuUmVxSUQpP3ImJkZ1bmN0aW9uLmlzRm4oci53YXRjaCkmJnIud2F0Y2gobyxsKTpudWxsLGMoZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI05fX2NhbmNlbCAuTl9fZmFpbCAubWVzIikuaW5uZXJIVE1MKX0pfSkudGhlbihmdW5jdGlvbigpe3JldHVybiB0LnVzZXJEYXRhS2lsbEJ1ZmZMUygpfSl9LHQucHJvdG90eXBlLm9uQ2xvc2VGb3JtPWZ1bmN0aW9uKCl7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoInJlc2l6ZSIsdGhpcy5PblJlcyk7Zm9yKHZhciB0PTAsZT1kb2N1bWVudC5mb3Jtczt0PGUubGVuZ3RoO3QrKyl7ZVt0XS5yZW1vdmVFdmVudExpc3RlbmVyKCJzdWJtaXQiLHRoaXMuT25TdWIpfWZvcih2YXIgbj0wLGk9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLkZfX2Zvcm0td3JhcCBpbnB1dDpub3QoW3R5cGU9c3VibWl0XSksIC5GX19mb3JtLXdyYXAgdGV4dGFyZWEiKTtuPGkubGVuZ3RoO24rKyl7dmFyIG89aVtuXTtvLnJlbW92ZUV2ZW50TGlzdGVuZXIoImZvY3VzIix0aGlzLk9uRm9jdXMpLG8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigiYmx1ciIsdGhpcy5PbkJsdXIpfX0sdC5wcm90b3R5cGUuc2V0TW9kdWxlPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLk9uU3ViPXRoaXMuX29uU3VibWl0KHQsZSxuKTtmb3IodmFyIGk9MCxvPWRvY3VtZW50LmZvcm1zO2k8by5sZW5ndGg7aSsrKXt2YXIgcj1vW2ldO3RoaXMuQmFzZS5fVV9FdmVudExpc3RTZXR0ZXIoInN1Ym1pdCIsdGhpcy5PblN1YixyKX19LHR9KCk7cmV0dXJuIHQocixbaSxvXSkscn0oKTs="
    }
}